var documenterSearchIndex = {"docs":
[{"location":"modules/linearAlgebraTypes/#Linear-Algebra-Types","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"","category":"section"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"In order to be able to perform operations more at ease and to store information easily, different linear algebra types were created. Their main feature is that through different constructors the user can pass the components they desire and these will always be stored in the Canonical Reference Frame or Basis. Having all vectors, points, vector bases, and reference frame components stored in only one basis/reference frame allows to speed the computation and to reduce the amount of possible errors.","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"The diagram below shows the five different types defined in the linear algebra module. Below each type, it can be seen the objects they store and the type of each of them (indicated as \\textit{fieldName::Type}). To access the field value inside the object it is only necessary to write the name of the variable followed by the fieldName. For example, if 'B1' is MyBasis object and I want to access its angular velocity, I would just have to type 'B1.omega'.","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"(Image: Alt text for screen readers)","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"All these linear algebra types are related among each other, that is why it was so important to get the chain of dependency between them correctly. This is where constructors come in. The Julia language allows to have more than one way to build a type/struct. Thanks to this feature, the user can have a vector v₁ expressed in vector basis B₁, and if both v₁ and B₁ (which must be a MyBasis, this means, it must be expressed with respect to the Canonical Basis) are passed, v₁ can be turned into a MyVector. This means simply that v₁ is stored internally with the coordinates with respect to the Canonical Basis. So, now, we will examine which are the different available constructors for each of the types.","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"MyVector: stores a vector of length three in the canonical right-handed vector basis B₀. These are its possible constructors:\nMyVector(c₀), where c₀ is a Vector{Float64} of length = 3 already expressed in the Canonical Basis.\nMyVector(c₁, B₁), where c₁ is a Vector{Float64} expressed in vector basis B₁, which is a MyBasis object.\nMyVector(x₀, y₀, z₀), where x₀, y₀, and z₀ are the vector components (numbers) already expressed in the Canonical Basis.\nMyVector(x₁, y₁, z₁, B₁), where x₁, y₁, and z₁ are the vector components (numbers) expressed in vector basis B₁, which is a MyBasis object.\nMyVector(), which simply builds a MyVector object full of zeros.","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"MyBasis: defines a vector basis (i.e., B₁) by storing its unit vectors, angular velocity, and angular acceleration with respect to the canonical basis B₀. These are the possible constructors:\nMyBasis(i₁₀, j₁₀, k₁₀, omega₁₀, alpha₁₀), where all are MyVector objects. i₁₀, j₁₀, k₁₀ are the unit vectors of vector basis B₁, and omega₁₀ and alpha₁₀ are the angular velocity and angular acceleration, respectively.\nMyBasis(i₂₁, j₂₁, k₂₁, omega₂₁, alpha₂₁, B₁), where all are Vector{Float64} which express the vector basis B₂, with respect to the vector basis B₁, which is a MyBasis object.\nMyBasis(), which builds the Canonical Basis.","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"MyPoint: stores the position, velocity, and acceleration vectors that define a point with respect to the inertial reference frame S₀. These are the possible constructors:\nMyPoint(pos, veloc, accel), where pos, veloc, and accel are the position, velocity, and acceleration vectors already MyVector objects as they are expressed with respect to the Canonical Reference Frame.\nMyPoint(pos₁, veloc₁, accel₁, RF₁), where pos₁, veloc₁, and accel₁ are Vector{Float64} expressed with respect to the reference frame RF₁, which is a MyReferenceFrame object.\nMyPoint(), which builds the Canonical Origin Point. This is just an empty point in the Canonical Reference Frame.","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"MyReferenceFrame: defined by a vector basis (i.e., B₁) which is a MyBasis object and a point (i.e., P₁) which is a MyPoint object. These are the possible constructors:\nMyReferenceFrame(basis, origin), where basis is a MyBasis object and origin is a MyPoint object.\nMyReferenceFrame(), which returns the inertial reference frame, whose basis is the Canonical Basis and origin point is the Canonical Origin Point.","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"MyParticle: object that defines the point particle by storing the point, which is a MyPoint object, and its associated mass. This is the constructor:\nMyParticle(point, mass), where point is a MyPoint object and mass is just a number.","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"Some useful objects have been also predefined, so that the user can simply call them every time they are needed, allowing therefore to save time. These predefined objects are the canonical vector basis B_0, the three canonical unitary vectors (mathbfi_0mathbfj_0mathbfk_0), the canonical origin point O_0, and the canonical/inertial reference frame S_0. They can simply be used by typing their correct name, which appear highlighted below:","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"CanonicalBasis = MyBasis(MyVector([1.0, 0.0, 0.0]), MyVector([0.0, 1.0, 0.0]), MyVector([0.0, 0.0, 1.0]), MyVector([0.0, 0.0, 0.0]), MyVector([0.0, 0.0, 0.0]))\ni0 = MyVector([1.0, 0.0, 0.0])\nj0 = MyVector([0.0, 1.0, 0.0])\nk0 = MyVector([0.0, 0.0, 1.0])\nCanonicalOriginPoint = MyPoint(MyVector([0.0, 0.0, 0.0]), MyVector([0.0, 0.0, 0.0]), MyVector([0.0, 0.0, 0.0]))\nCanonicalReferenceFrame = MyReferenceFrame(MyBasis(MyVector([1.0, 0.0, 0.0]), MyVector([0.0, 1.0, 0.0]), MyVector([0.0, 0.0, 1.0]), MyVector([0.0, 0.0, 0.0]), MyVector([0.0, 0.0, 0.0])), MyPoint(MyVector([0.0, 0.0, 0.0]), MyVector([0.0, 0.0, 0.0]), MyVector([0.0, 0.0, 0.0])))","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"Both recipes and functions have been implemented to allow plotting MyBasis and MyReferenceFrame objects in 3D. The only difference in their usage is that for the recipes it is required to include again the Plots.jl package, by writing before:using Plots. The proper way to call this functions or recipes is addressed in the table below:","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"Function call Recipe call Functionality\nplot_MyBasis(B1) plot(B1) Plot the MyBasis object B1 in 3D using either the function or the recipe\nplot_MyReferenceFrame(RF1) plot(RF1) Plot the MyReferenceFrame object S1 in 3D using either the function or the recipe","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"In addition, some useful functions have also been created to assist in changing of reference frame, rotating vector basis, and more. ","category":"page"},{"location":"modules/linearAlgebraTypes/","page":"Linear Algebra Types","title":"Linear Algebra Types","text":"Function Name Inputs Outputs Functionality\ncomponentsInBasis v::MyVector<br>B1::MyBasis v1::Vector Project a MyVector object onto a basis B₁\nposvelacc_inRF point::MyPoint<br>RF1::MyReferenceFrame pos1::Vector<br>veloc1::Vector<br>accel1::Vector Obtain the position, velocity, and acceleration vectors of a MyPoint object in a different reference frame S₁\nrotation_matrix basis::MyBasis R::Matrix Obtain the Rotation Matrix [₀R₁] of a MyBasis object B₁\npurerotationMyBasis_x basis::MyBasis<br>theta::Number rotB::MyBasis Obtain the new MyBasis object after a pure rotation about the x-axis\npurerotationMyBasis_y basis::MyBasis<br>theta::Number rotB::MyBasis Obtain the new MyBasis object after a pure rotation about the y-axis\npurerotationMyBasis_z basis::MyBasis<br>theta::Number rotB::MyBasis Obtain the new MyBasis object after a pure rotation about the z-axis","category":"page"},{"location":"#AstrodynamicsEdu.jl-Documentation","page":"Home","title":"AstrodynamicsEdu.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for AstrodynamicsEdu, an educational package designed to provide  a comprehensive understanding of orbital dynamics. This documentation serves as a guide for  students, educators, and enthusiasts interested in exploring the fascinating world of astrodynamics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"AstrodynamicsEdu offers a wide range of features to facilitate learning and problem-solving in the  field of orbital dynamics. Let's take a closer look at the key features offered by this package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Solving Problems of the Ideal Two-Body Problem.\nChange of Reference Frame: AstrodynamicsEdu supports the transformation of orbital elements and ","category":"page"},{"location":"","page":"Home","title":"Home","text":"state vectors between different reference frames, including inertial frames, rotating frames, and  non-inertial frames.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Orbital Maneuvers and Delta-v Computation.\nOrbital Perturbations: AstrodynamicsEdu incorporates models for common perturbations, including ","category":"page"},{"location":"","page":"Home","title":"Home","text":"atmospheric drag and Earth's oblateness.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Orbit Visualization and Plotting.\nEducational Resources and Examples: To support the learning process, AstrodynamicsEdu provides a ","category":"page"},{"location":"","page":"Home","title":"Home","text":"collection of educational resources, sample problems, and examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We hope that AstrodynamicsEdu and this documentation empower you on your journey to mastering orbital  dynamics.","category":"page"},{"location":"#Getting-Started:-Installation-And-First-Steps","page":"Home","title":"Getting Started: Installation And First Steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As this package has not been registered yet, to run this package you need to write the following  commands in your Julia REPL terminal to install the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\r\nPkg.activate(\".\")\r\nPkg.instantiate()\r\nPkg.add(url=\"https://github.com/AliciaSBa/AstrodynamicsEdu.jl.git\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once it has been registered, it will only be necessary to run the following command to install it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"AstrodynamicsEdu\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To load the package, use the command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using AstrodynamicsEdu","category":"page"},{"location":"#Package-Structure","page":"Home","title":"Package Structure","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The AstrodynamicsEdu package is composed by six different submodules, each designed to provide a  different set of capabilities related with Orbital Dynamics. The different functionalities and  details of each specific module can be found on its respective documentation page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\r\n\"modules/linearAlgebraTypes.md\",\r\n\"modules/idealTwoBodyProblem.md\"\r\n]\r\nDepth = 2","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To help you kick-start using the AstrodynamicsEdu package, a set of extensive orbital dynamics problems are provided as examples. These problems have been taken from the course of Space Vehicles  and Orbital Dynamics from University Carlos III of Madrid (uc3m). You can find the example  problems below:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\r\n    \"tutorials/example1.md\",\r\n]\r\nDepth = 2","category":"page"},{"location":"modules/idealTwoBodyProblem/#Ideal-Two-Body-Problem","page":"Ideal Two Body Problem","title":"Ideal Two Body Problem","text":"","category":"section"},{"location":"modules/idealTwoBodyProblem/","page":"Ideal Two Body Problem","title":"Ideal Two Body Problem","text":"Inside this module, two new data types are defined. These are: MyStateVector and MyCOE, they are defined in the diagram below:","category":"page"},{"location":"modules/idealTwoBodyProblem/","page":"Ideal Two Body Problem","title":"Ideal Two Body Problem","text":"Here are listed all the functions related to the Ideal Two Body Problem. For each is included how to call it, the inputs expected (and their type), and the outputs obtained, as well as a brief explanation of what the function does.","category":"page"}]
}
